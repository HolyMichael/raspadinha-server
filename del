no servidor vou meter:

    -username
    -chave simetrica servidor -> cliente
    -chave simetrica cliente ->  servidor

    -public key do servido**     - do mesmo par de chaves RSA
    -private key do servidor**  - do mesmo par de chaves RSA
    -public key do cliente **
    
    ** temporarias, acho que depois de gerar posso apagar


no cliente guardar:   (no local storage or something)
    -chave simetrica servidor -> cliente
    -chave simetrica cliente ->  servidor

    -public key do cliente**     - do mesmo par de chaves RSA
    -private key do cliente**  - do mesmo par de chaves RSA
    -public key do servidor **


    ha uma opcao para meter um par de chaves num wrapper
    ou seja Ã© para encriptar a palavra passe
    


-----------------------------------

por o servidor a gerar uma chave rsa logo na homepage

depois o cliente gera uma chave simetrica 

cliente cifra a chave simetrica com a publica do servidor

envia a chave cifrada para o servidor

-------------------------------

print(JSON.parse(localStorage.getItem("ignore")))

        jason_fake = JSON.parse(localStorage.getItem("ignore"))
        jason_fake.alg = "PS256"
        jason_fake.key_ops = "sign"
        print(key_print(jason_fake))

        let jason_key = {   //this is an example jwk key, other key types are Uint8Array objects
            kty: "RSA",
            e: "AQAB",
            n: client_sk,
            alg: "PS256",
            ext: true,
        }

        window.crypto.subtle.importKey(
            "jwk", //can be "jwk" or "raw"
            jason_fake,
            {   //these are the algorithm options
                name: "RSA-PSS",
                hash: {name: "SHA-256"}, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
            },
            true, //whether the key is extractable (i.e. can be used in exportKey)
            ["sign"]//can "encrypt", "decrypt", "wrapKey", or "unwrapKey"
        ).then(function (key) {
            //returns the symmetric key
            console.log(key);

            window.crypto.subtle.sign(
                {
                    name: "RSA-PSS",
                    saltLength: 64,
                    //label: Uint8Array([...]) //optional
                },
                key, //from generateKey or importKey above
                new Uint8Array(data) //ArrayBuffer
            ).then(function (encrypted) {
                //returns an ArrayBuffer containing the encrypted data
                print(encrypted)
                socket.emit("reply_to_challenge", encrypted)

            })

        })
------------------------------
servidor
		socket.on("reply_to_challenge", (data) => {
				print("hi mark")

				
				let jason_key = {   //this is an example jwk key, other key types are Uint8Array objects
					kty: "RSA",
					e: "AQAB",
					n: client_publicKey,
					alg: "PS256",
					ext: true,
				}
				crypto.subtle.importKey(
					"jwk", //can be "jwk" (public or private), "spki" (public only), or "pkcs8" (private only)
					jason_key,
					{   //these are the algorithm options
						name: "PS256",
						hash: { name: "SHA-256" }, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
					},
					true, //whether the key is extractable (i.e. can be used in exportKey)
					["verify"] //"encrypt" or "wrapKey" for public key import or
					//"decrypt" or "unwrapKey" for private key imports
				).then(function (publicKey) {

					crypto.subtle.verify(
						{
							name: "RSA-PSS",
							saltLength: 64, //the length of the salt
						},
						publicKey, //from generateKey or importKey above
						data //ArrayBuffer of the data
					)
						.then(function (decrypted) {
							//returns an ArrayBuffer containing the decrypted data
							print(decrypted)
						})

				})





